000100 IDENTIFICATION DIVISION. 
000200 PROGRAM-ID. AOC-2016-D10P2.
000300
000400 ENVIRONMENT DIVISION. 
000500 INPUT-OUTPUT SECTION. 
000600 FILE-CONTROL. 
000700     SELECT INPUTFILE ASSIGN TO 'INPUT'
000800     ORGANIZATION IS LINE SEQUENTIAL.
000900
001000 DATA DIVISION. 
001100 FILE SECTION. 
001200 FD INPUTFILE IS EXTERNAL 
001300     RECORD IS VARYING IN SIZE
001400     DATA RECORD IS INPUT-LINE.
001500 01 INPUT-LINE   PIC X(99).
001600
001700 WORKING-STORAGE SECTION. 
001800 01 LOOP            PIC 9       VALUE 1.
001900 01 LEN             PIC 99.
002000 01 INSTR           PIC X(99).
002100 01 TMP             PIC 999.
002200 01 TMP2            PIC 999.
002300 01 TMP-L           PIC 999.
002400 01 TMP-R           PIC 999.
       01 RET             PIC 9(6)    VALUE 0.
       01 OUTS.
           05 BINS        OCCURS 21 TIMES.
              10 B-VAL    PIC 999.
002500 01 BOTS.
002600     05 CHIPS       OCCURS 250 TIMES.
002700        10 BOT      PIC 999     VALUE 999.
002800        10 L-VAL    PIC 999     VALUE 0.
002900        10 R-VAL    PIC 999     VALUE 0.
003000        10 LO       PIC 999     VALUE 0.
003100        10 HI       PIC 999     VALUE 0.
003200        10 PROC     PIC 9       VALUE 0.
003300
003400 PROCEDURE DIVISION.
003500 MAIN.
003600     OPEN INPUT INPUTFILE.
003700     PERFORM UNTIL LOOP = 0
003800        READ INPUTFILE NEXT RECORD INTO INPUT-LINE 
003900        AT END
004000           MOVE 0 TO LOOP
004100        NOT AT END
004200           PERFORM PARSE-LINE
004300        END-READ
004400     END-PERFORM
004500     CLOSE INPUTFILE
004600
004700     MOVE 1 TO LOOP
004800     PERFORM UNTIL LOOP = 0
004900        MOVE 0 TO LOOP
005000        PERFORM VARYING TMP FROM 1 BY 1 UNTIL TMP > 250
005100           IF BOT IN CHIPS(TMP) IS NOT EQUAL TO 999 THEN
005200
005300              IF L-VAL IN CHIPS(TMP) IS NOT EQUAL TO 0 AND 
005400                 R-VAL IN CHIPS(TMP) IS NOT EQUAL TO 0 AND
005500                 PROC IN CHIPS(TMP) IS EQUAL TO 0 THEN
005600
005700                 PERFORM ASSIGN-CHIPS
005800              END-IF
005900
006000              IF L-VAL IN CHIPS(TMP) = 0 OR
006100                 R-VAL IN CHIPS(TMP) = 0 THEN
006200                 MOVE 1 TO LOOP
006300              END-IF 
006400           END-IF
006500        END-PERFORM
006600        PERFORM SORT-CHIPS
006700     END-PERFORM
006800

           COMPUTE
              RET=B-VAL IN BINS(1) * B-VAL IN BINS(2) * B-VAL IN BINS(3)
           END-COMPUTE
           DISPLAY RET
007700
007800     GOBACK.
007900
008000 SORT-CHIPS.
008100     PERFORM VARYING TMP FROM 1 BY 1 UNTIL TMP > 250
008200        IF BOT IN CHIPS(TMP) IS NOT EQUAL TO 999 THEN
008300           MOVE L-VAL IN CHIPS(TMP) TO TMP-L
008400           MOVE R-VAL IN CHIPS(TMP) TO TMP-R
008500           MOVE FUNCTION MIN(TMP-L TMP-R) TO L-VAL IN CHIPS(TMP)
008600           MOVE FUNCTION MAX(TMP-L TMP-R) TO R-VAL IN CHIPS(TMP)
008700        END-IF
008800     END-PERFORM.
008900
009000 ASSIGN-CHIPS.
009100*    LOW
009200     MOVE FUNCTION MIN(L-VAL IN CHIPS(TMP) R-VAL IN CHIPS(TMP))
009300        TO TMP-L
009400     MOVE LO IN CHIPS(TMP) TO TMP-R
009500     
009600     COMPUTE TMP2 = TMP - 1 END-COMPUTE
009700     IF TMP-R IS LESS THAN 900 THEN
009800        IF L-VAL IN CHIPS(TMP-R + 1) = 0 THEN
009900           MOVE TMP-L TO L-VAL IN CHIPS(TMP-R + 1)
010000           ADD 1 TO PROC IN CHIPS(TMP)
010100        ELSE IF R-VAL IN CHIPS(TMP-R + 1) = 0 THEN
010200           MOVE TMP-L TO R-VAL IN CHIPS(TMP-R + 1)
010300           ADD 1 TO PROC IN CHIPS(TMP)
010400        END-IF
010500     ELSE
              SUBTRACT 900 FROM TMP-R
              MOVE TMP-L TO B-VAL IN BINS(TMP-R + 1)
010600        ADD 1 TO PROC IN CHIPS(TMP)
010700     END-IF
010800
010900*    HIGH
011000     MOVE FUNCTION MAX(L-VAL IN CHIPS(TMP) R-VAL IN CHIPS(TMP))
011100        TO TMP-L
011200     MOVE HI IN CHIPS(TMP) TO TMP-R
011300
011400     IF TMP-R IS LESS THAN 900 THEN
011500        IF L-VAL IN CHIPS(TMP-R + 1) = 0 THEN
011600           MOVE TMP-L TO L-VAL IN CHIPS(TMP-R + 1)
011700           ADD 1 TO PROC IN CHIPS(TMP)
011800        ELSE IF R-VAL IN CHIPS(TMP-R + 1) = 0 THEN
011900           MOVE TMP-L TO R-VAL IN CHIPS(TMP-R + 1)
012000           ADD 1 TO PROC IN CHIPS(TMP)
012100        END-IF
012200     ELSE
              SUBTRACT 900 FROM TMP-R
              MOVE TMP-L TO B-VAL IN BINS(TMP-R + 1)
012300        ADD 1 TO PROC IN CHIPS(TMP)
012400     END-IF.
012500
012600 PARSE-LINE.
012700     INSPECT INSTR REPLACING CHARACTERS BY SPACE
012800*    IMMEDIATE ASSIGNMENT CASE
012900     IF INPUT-LINE(1:1) = 'v' THEN
013000        MOVE INPUT-LINE TO INSTR
013100        MOVE 0 TO LEN
013200        INSPECT INSTR CONVERTING 
013300           "abcdefghijklmnopqrstuvwxyz" TO SPACE
013400        MOVE FUNCTION TRIM(INSTR) TO INSTR
013500        INSPECT INSTR TALLYING LEN FOR
013600           CHARACTERS BEFORE INITIAL SPACE 
013700
013800        MOVE INSTR(1:LEN) TO TMP-L
013900
014000        INSPECT INSTR REPLACING CHARACTERS BY SPACE 
014100           BEFORE SPACE
014200        MOVE INSTR TO TMP-R
014300
014400        MOVE TMP-R TO BOT IN CHIPS(TMP-R + 1)
014500        
014600        IF L-VAL IN CHIPS(TMP-R + 1) = 0 THEN
014700           MOVE TMP-L TO L-VAL IN CHIPS(TMP-R + 1)
014800        ELSE
014900           MOVE TMP-L TO R-VAL IN CHIPS(TMP-R + 1)
015000        END-IF
015100        
015200     ELSE IF INPUT-LINE(1:1) = 'b' THEN
015300*       DISPLAY INPUT-LINE
015400        INSPECT INPUT-LINE CONVERTING 
015500           "acdefghijklmnoqrstuvwxyz" TO SPACE 
015600        MOVE FUNCTION TRIM(INPUT-LINE(2:)) TO INPUT-LINE
015700
015800        MOVE 1 TO LEN
015900        MOVE 1 TO TMP-L TMP-R
016000        PERFORM UNTIL TMP-L > LENGTH OF FUNCTION TRIM(INPUT-LINE)
016100           IF INPUT-LINE(TMP-L:1) IS NOT EQUAL TO SPACE THEN
016200              MOVE INPUT-LINE(TMP-L:1) TO INSTR(TMP-R:1)
016300              ADD 1 TO TMP-R
016400              MOVE 1 TO LEN
016500           ELSE
016600              IF LEN = 1 THEN
016700                 MOVE INPUT-LINE(TMP-L:1) TO INSTR(TMP-R:1)
016800                 ADD 1 TO TMP-R
016900                 MOVE 0 TO LEN
017000              END-IF
017100           END-IF
017200           ADD 1 TO TMP-L
017300        END-PERFORM
017400        
017500        MOVE 0 TO LEN
017600        INSPECT INSTR TALLYING LEN FOR 
017700           CHARACTERS BEFORE INITIAL SPACE
017800        MOVE INSTR(1:LEN) TO TMP
017900        MOVE TMP TO BOT IN CHIPS(TMP + 1)
018000        MOVE INSTR(LEN + 2:) TO INSTR
018100
018200*       CASE FOR LOW; SKIP OUTPUT FOR NOW
018300        MOVE 0 TO LEN
018400        INSPECT FUNCTION TRIM(INSTR(3:)) TALLYING LEN FOR 
018500           CHARACTERS BEFORE INITIAL SPACE
018600
018700        IF INSTR(1:1) = 'b' THEN
018800           MOVE INSTR(3:LEN) TO LO IN CHIPS(TMP + 1)
018900        ELSE
                 MOVE INSTR(3:LEN) TO LO IN CHIPS(TMP + 1)
019000           ADD 900 TO LO IN CHIPS(TMP + 1)
019100        END-IF
019200
019300        MOVE INSTR(4 + LEN:) TO INSTR
019400
019500*       CASE FOR HIGH; SKIP OUTPUT FOR NOW
019600        MOVE 0 TO LEN
019700        INSPECT FUNCTION TRIM(INSTR(3:)) TALLYING LEN FOR 
019800           CHARACTERS BEFORE INITIAL SPACE
019900
020000        IF INSTR(1:1) = 'b' THEN
020100           MOVE INSTR(3:LEN) TO HI IN CHIPS(TMP + 1)
020200        ELSE
                 MOVE INSTR(3:LEN) TO HI IN CHIPS(TMP + 1)
020300           ADD 900 TO HI IN CHIPS(TMP + 1)
020400        END-IF
020500        
020600     END-IF.
020700
020800 END PROGRAM AOC-2016-D10P2.
