000100 IDENTIFICATION DIVISION. 
000200 PROGRAM-ID. AOC-2016-D10P2.
000300
000400 ENVIRONMENT DIVISION. 
000500 INPUT-OUTPUT SECTION. 
000600 FILE-CONTROL. 
000700     SELECT INPUTFILE ASSIGN TO 'INPUT'
000800     ORGANIZATION IS LINE SEQUENTIAL.
000900
001000 DATA DIVISION. 
001100 FILE SECTION. 
001200 FD INPUTFILE IS EXTERNAL 
001300     RECORD IS VARYING IN SIZE
001400     DATA RECORD IS INPUT-LINE.
001500 01 INPUT-LINE   PIC X(99).
001600
001700 WORKING-STORAGE SECTION. 
001800 01 LOOP            PIC 9       VALUE 1.
001900 01 LEN             PIC 99.
002000 01 INSTR           PIC X(99).
002100 01 TMP             PIC 999.
002200 01 TMP2            PIC 999.
002300 01 TMP-L           PIC 999.
002400 01 TMP-R           PIC 999.
002500 01 RET             PIC 9(6)    VALUE 0.
002600 01 OUTS.
002700     05 BINS        OCCURS 21 TIMES.
002800        10 B-VAL    PIC 999.
002900 01 BOTS.
003000     05 CHIPS       OCCURS 250 TIMES.
003100        10 BOT      PIC 999     VALUE 999.
003200        10 L-VAL    PIC 999     VALUE 0.
003300        10 R-VAL    PIC 999     VALUE 0.
003400        10 LO       PIC 999     VALUE 0.
003500        10 HI       PIC 999     VALUE 0.
003600        10 PROC     PIC 9       VALUE 0.
003700
003800 PROCEDURE DIVISION.
003900 MAIN.
004000     OPEN INPUT INPUTFILE.
004100     PERFORM UNTIL LOOP = 0
004200        READ INPUTFILE NEXT RECORD INTO INPUT-LINE 
004300        AT END
004400           MOVE 0 TO LOOP
004500        NOT AT END
004600           PERFORM PARSE-LINE
004700        END-READ
004800     END-PERFORM
004900     CLOSE INPUTFILE
005000
005100     MOVE 1 TO LOOP
005200     PERFORM UNTIL LOOP = 0
005300        MOVE 0 TO LOOP
005400        PERFORM VARYING TMP FROM 1 BY 1 UNTIL TMP > 250
005500           IF BOT IN CHIPS(TMP) IS NOT EQUAL TO 999 THEN
005600
005700              IF L-VAL IN CHIPS(TMP) IS NOT EQUAL TO 0 AND 
005800                 R-VAL IN CHIPS(TMP) IS NOT EQUAL TO 0 AND
005900                 PROC IN CHIPS(TMP) IS EQUAL TO 0 THEN
006000
006100                 PERFORM ASSIGN-CHIPS
006200              END-IF
006300
006400              IF L-VAL IN CHIPS(TMP) = 0 OR
006500                 R-VAL IN CHIPS(TMP) = 0 THEN
006600                 MOVE 1 TO LOOP
006700              END-IF 
006800           END-IF
006900        END-PERFORM
007000        PERFORM SORT-CHIPS
007100     END-PERFORM
007200
007300     COMPUTE
007400        RET=B-VAL IN BINS(1) * B-VAL IN BINS(2) * B-VAL IN BINS(3)
007500     END-COMPUTE
007600     DISPLAY RET
007700
007800     GOBACK.
007900
008000 SORT-CHIPS.
008100     PERFORM VARYING TMP FROM 1 BY 1 UNTIL TMP > 250
008200        IF BOT IN CHIPS(TMP) IS NOT EQUAL TO 999 THEN
008300           MOVE L-VAL IN CHIPS(TMP) TO TMP-L
008400           MOVE R-VAL IN CHIPS(TMP) TO TMP-R
008500           MOVE FUNCTION MIN(TMP-L TMP-R) TO L-VAL IN CHIPS(TMP)
008600           MOVE FUNCTION MAX(TMP-L TMP-R) TO R-VAL IN CHIPS(TMP)
008700        END-IF
008800     END-PERFORM.
008900
009000 ASSIGN-CHIPS.
009100*    LOW
009200     MOVE FUNCTION MIN(L-VAL IN CHIPS(TMP) R-VAL IN CHIPS(TMP))
009300        TO TMP-L
009400     MOVE LO IN CHIPS(TMP) TO TMP-R
009500     
009600     COMPUTE TMP2 = TMP - 1 END-COMPUTE
009700     IF TMP-R IS LESS THAN 900 THEN
009800        IF L-VAL IN CHIPS(TMP-R + 1) = 0 THEN
009900           MOVE TMP-L TO L-VAL IN CHIPS(TMP-R + 1)
010000           ADD 1 TO PROC IN CHIPS(TMP)
010100        ELSE IF R-VAL IN CHIPS(TMP-R + 1) = 0 THEN
010200           MOVE TMP-L TO R-VAL IN CHIPS(TMP-R + 1)
010300           ADD 1 TO PROC IN CHIPS(TMP)
010400        END-IF
010500     ELSE
010600        SUBTRACT 900 FROM TMP-R
010700        MOVE TMP-L TO B-VAL IN BINS(TMP-R + 1)
010800        ADD 1 TO PROC IN CHIPS(TMP)
010900     END-IF
011000
011100*    HIGH
011200     MOVE FUNCTION MAX(L-VAL IN CHIPS(TMP) R-VAL IN CHIPS(TMP))
011300        TO TMP-L
011400     MOVE HI IN CHIPS(TMP) TO TMP-R
011500
011600     IF TMP-R IS LESS THAN 900 THEN
011700        IF L-VAL IN CHIPS(TMP-R + 1) = 0 THEN
011800           MOVE TMP-L TO L-VAL IN CHIPS(TMP-R + 1)
011900           ADD 1 TO PROC IN CHIPS(TMP)
012000        ELSE IF R-VAL IN CHIPS(TMP-R + 1) = 0 THEN
012100           MOVE TMP-L TO R-VAL IN CHIPS(TMP-R + 1)
012200           ADD 1 TO PROC IN CHIPS(TMP)
012300        END-IF
012400     ELSE
012500        SUBTRACT 900 FROM TMP-R
012600        MOVE TMP-L TO B-VAL IN BINS(TMP-R + 1)
012700        ADD 1 TO PROC IN CHIPS(TMP)
012800     END-IF.
012900
013000 PARSE-LINE.
013100     INSPECT INSTR REPLACING CHARACTERS BY SPACE
013200*    IMMEDIATE ASSIGNMENT CASE
013300     IF INPUT-LINE(1:1) = 'v' THEN
013400        MOVE INPUT-LINE TO INSTR
013500        MOVE 0 TO LEN
013600        INSPECT INSTR CONVERTING 
013700           "abcdefghijklmnopqrstuvwxyz" TO SPACE
013800        MOVE FUNCTION TRIM(INSTR) TO INSTR
013900        INSPECT INSTR TALLYING LEN FOR
014000           CHARACTERS BEFORE INITIAL SPACE 
014100
014200        MOVE INSTR(1:LEN) TO TMP-L
014300
014400        INSPECT INSTR REPLACING CHARACTERS BY SPACE 
014500           BEFORE SPACE
014600        MOVE INSTR TO TMP-R
014700
014800        MOVE TMP-R TO BOT IN CHIPS(TMP-R + 1)
014900        
015000        IF L-VAL IN CHIPS(TMP-R + 1) = 0 THEN
015100           MOVE TMP-L TO L-VAL IN CHIPS(TMP-R + 1)
015200        ELSE
015300           MOVE TMP-L TO R-VAL IN CHIPS(TMP-R + 1)
015400        END-IF
015500        
015600     ELSE IF INPUT-LINE(1:1) = 'b' THEN
015700*       DISPLAY INPUT-LINE
015800        INSPECT INPUT-LINE CONVERTING 
015900           "acdefghijklmnoqrstuvwxyz" TO SPACE 
016000        MOVE FUNCTION TRIM(INPUT-LINE(2:)) TO INPUT-LINE
016100
016200        MOVE 1 TO LEN
016300        MOVE 1 TO TMP-L TMP-R
016400        PERFORM UNTIL TMP-L > LENGTH OF FUNCTION TRIM(INPUT-LINE)
016500           IF INPUT-LINE(TMP-L:1) IS NOT EQUAL TO SPACE THEN
016600              MOVE INPUT-LINE(TMP-L:1) TO INSTR(TMP-R:1)
016700              ADD 1 TO TMP-R
016800              MOVE 1 TO LEN
016900           ELSE
017000              IF LEN = 1 THEN
017100                 MOVE INPUT-LINE(TMP-L:1) TO INSTR(TMP-R:1)
017200                 ADD 1 TO TMP-R
017300                 MOVE 0 TO LEN
017400              END-IF
017500           END-IF
017600           ADD 1 TO TMP-L
017700        END-PERFORM
017800        
017900        MOVE 0 TO LEN
018000        INSPECT INSTR TALLYING LEN FOR 
018100           CHARACTERS BEFORE INITIAL SPACE
018200        MOVE INSTR(1:LEN) TO TMP
018300        MOVE TMP TO BOT IN CHIPS(TMP + 1)
018400        MOVE INSTR(LEN + 2:) TO INSTR
018500
018600*       CASE FOR LOW; SKIP OUTPUT FOR NOW
018700        MOVE 0 TO LEN
018800        INSPECT FUNCTION TRIM(INSTR(3:)) TALLYING LEN FOR 
018900           CHARACTERS BEFORE INITIAL SPACE
019000
019100        IF INSTR(1:1) = 'b' THEN
019200           MOVE INSTR(3:LEN) TO LO IN CHIPS(TMP + 1)
019300        ELSE
019400           MOVE INSTR(3:LEN) TO LO IN CHIPS(TMP + 1)
019500           ADD 900 TO LO IN CHIPS(TMP + 1)
019600        END-IF
019700
019800        MOVE INSTR(4 + LEN:) TO INSTR
019900
020000*       CASE FOR HIGH; SKIP OUTPUT FOR NOW
020100        MOVE 0 TO LEN
020200        INSPECT FUNCTION TRIM(INSTR(3:)) TALLYING LEN FOR 
020300           CHARACTERS BEFORE INITIAL SPACE
020400
020500        IF INSTR(1:1) = 'b' THEN
020600           MOVE INSTR(3:LEN) TO HI IN CHIPS(TMP + 1)
020700        ELSE
020800           MOVE INSTR(3:LEN) TO HI IN CHIPS(TMP + 1)
020900           ADD 900 TO HI IN CHIPS(TMP + 1)
021000        END-IF
021100        
021200     END-IF.
021300
021400 END PROGRAM AOC-2016-D10P2.
